<!--
Developed by Timba Software Corp. www.timbasoftware.com admin@timbasoftware.com
 This component add scripts functionality for Gauges based on SVG and VML.
 @author Julio Viera <jviera@timbasoftware.com>
 
 HOW TO USE IT:
 
 The Gauges are displaying by adding a class style speedometer
 This class must be assigned to a div tag, and into rel attribute 
 you can establish a limit between 0 to 100.
 When the document is loaded, gauges run automaticaly to the limit. 
 BE SURE of assign a diferent ID for every div that use gauges.
 
-->  
<apex:component >
 
	<style>
		.speedometer {
			background: transparent url({!URLFOR($Resource.XactlySMBResources, 'img/layout/back_speedometers.png')}) left top no-repeat;
			width: 185px;
			height: 185px;
		} 
		.speedometer2 {
			background: transparent url({!URLFOR($Resource.XactlySMBResources, 'img/layout/back_speedometers2.png')}) left top no-repeat;
			width: 110px;
			height: 110px;
		} 
 	</style>
    
    <script type="text/javascript" language="javascript" src="{!URLFOR($Resource.XactlySMBResources, 'js/raphael.js')}"></script>    
    <apex:includeScript value="{!URLFOR($Resource.XactlyExpress__CSN, 'jquery.js')}" />
    
    <script>
    
    
/**
 * jQuery.timers - Timer abstractions for jQuery
 * Written by Blair Mitchelmore (blair DOT mitchelmore AT gmail DOT com)
 * Licensed under the WTFPL (http://sam.zoy.org/wtfpl/).
 * Date: 2009/02/08
 *
 * @author Blair Mitchelmore
 * @version 1.1.2
 *
 **/
jQuery.fn.extend({
	everyTime: function(interval, label, fn, times, belay) {
		return this.each(function() {
			jQuery.timer.add(this, interval, label, fn, times, belay);
		});
	},
	oneTime: function(interval, label, fn) {
		return this.each(function() {
			jQuery.timer.add(this, interval, label, fn, 1);
		});
	},
	stopTime: function(label, fn) {
		return this.each(function() {
			jQuery.timer.remove(this, label, fn);
		});
	}
});

jQuery.event.special

jQuery.extend({
	timer: {
		global: [],
		guid: 1,
		dataKey: "jQuery.timer",
		regex: /^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,
		powers: {
			// Yeah this is major overkill...
			'ms': 1,
			'cs': 10,
			'ds': 100,
			's': 1000,
			'das': 10000,
			'hs': 100000,
			'ks': 1000000
		},
		timeParse: function(value) {
			if (value == undefined || value == null)
				return null;
			var result = this.regex.exec(jQuery.trim(value.toString()));
			if (result[2]) {
				var num = parseFloat(result[1]);
				var mult = this.powers[result[2]] || 1;
				return num * mult;
			} else {
				return value;
			}
		},
		add: function(element, interval, label, fn, times, belay) {
			var counter = 0;
			
			if (jQuery.isFunction(label)) {
				if (!times) 
					times = fn;
				fn = label;
				label = interval;
			}
			
			interval = jQuery.timer.timeParse(interval);

			if (typeof interval != 'number' || isNaN(interval) || interval <= 0)
				return;

			if (times && times.constructor != Number) {
				belay = !!times;
				times = 0;
			}
			
			times = times || 0;
			belay = belay || false;
			
			var timers = jQuery.data(element, this.dataKey) || jQuery.data(element, this.dataKey, {});
			
			if (!timers[label])
				timers[label] = {};
			
			fn.timerID = fn.timerID || this.guid++;
			
			var handler = function() {
				if (belay && this.inProgress) 
					return;
				this.inProgress = true;
				if ((++counter > times && times !== 0) || fn.call(element, counter) === false)
					jQuery.timer.remove(element, label, fn);
				this.inProgress = false;
			};
			
			handler.timerID = fn.timerID;
			
			if (!timers[label][fn.timerID])
				timers[label][fn.timerID] = window.setInterval(handler,interval);
			
			this.global.push( element );
			
		},
		remove: function(element, label, fn) {
			var timers = jQuery.data(element, this.dataKey), ret;
			
			if ( timers ) {
				
				if (!label) {
					for ( label in timers )
						this.remove(element, label, fn);
				} else if ( timers[label] ) {
					if ( fn ) {
						if ( fn.timerID ) {
							window.clearInterval(timers[label][fn.timerID]);
							delete timers[label][fn.timerID];
						}
					} else {
						for ( var fn in timers[label] ) {
							window.clearInterval(timers[label][fn]);
							delete timers[label][fn];
						}
					}
					
					for ( ret in timers[label] ) break;
					if ( !ret ) {
						ret = null;
						delete timers[label];
					}
				}
				
				for ( ret in timers ) break;
				if ( !ret ) 
					jQuery.removeData(element, this.dataKey);
			}
		}
	}
});

jQuery(window).bind("unload", function() {
	jQuery.each(jQuery.timer.global, function(index, item) {
		jQuery.timer.remove(item);
	});
});


/**
 * jQuery Dashboard Gauges v0.1.0
 * http://techoctave.com/c7
 *
 * Copyright 2010, Tian Valdemar Davis
 * Dual licensed under the MIT license.
 * http://en.wikipedia.org/wiki/MIT_license
 *
 * Date: Mon Sep 6 10:00:00 2010 -0500
 */
Gauge = function () {
	//[State]
	var gaugeID; //container e.g. speedometer
	var gaugeX; //gauge width
	var gaugeY; //gauge height
	var gaugeCanvas;
	
	//var needleID; //container e.g. needle
	var src; //needle src
	var needle; //needle object
	var posX; //needle x postion on gauge
	var posY; //needle y position on gauge
	var width; //needle width
	var height; //needle height
	var cX; //needle center rotation x
	var cY; //needle center rotation y
	
	var limit;
	var state;
	var fc_incr_state;
	var ajs_per;
	var size;
}

//[Properties]
Gauge.prototype.SetSize = function(_size) {
	this.size = _size;
}
Gauge.prototype.GetSize = function() {
	return this.size;
}
Gauge.prototype.SetLimit = function(_limit) {
	this.limit = _limit;
}
Gauge.prototype.GetLimit = function() {
	return this.limit;
}
Gauge.prototype.SetState = function(_state) {
	this.state = _state;
}
Gauge.prototype.GetState = function() {
	return this.state;
}
Gauge.prototype.SetFcIncrState = function(_fc) {
	this.fc_incr_state = _fc;
}
Gauge.prototype.GetFcIncrState = function() {
	return this.fc_incr_state;
}
Gauge.prototype.SetAjsPer = function(_ajs) {
	this.ajs_per = _ajs;
}
Gauge.prototype.GetAjsPer = function() {
	return this.ajs_per;
}
Gauge.prototype.SetGaugeX = function(gaugeX) {
	this.gaugeX = gaugeX;
}

Gauge.prototype.SetGaugeY = function(gaugeY) {
	this.gaugeY = gaugeY;
}

Gauge.prototype.SetGaugeID = function(gaugeID) {
	this.gaugeID = gaugeID;
}
Gauge.prototype.GetGaugeID = function() {
	return this.gaugeID;
}
Gauge.prototype.SetNeedleID = function(needleID) {
	this.needleID = needleID;
}

Gauge.prototype.SetPosX = function(posX) {
	this.posX = posX;
}

Gauge.prototype.SetPosY = function(posY) {
	this.posY = posY;
}

Gauge.prototype.SetWidth = function(width) {
	this.width = width;
}

Gauge.prototype.SetHeight = function(height) {
	this.height = height;
}

//[Methods]	
Gauge.prototype.LoadCX = function(offsetX) {
	this.cX = (this.gaugeX/2) + offsetX;
}

Gauge.prototype.LoadCY = function(offsetY) {
	this.cY = (this.gaugeY/2) + offsetY;
}

Gauge.prototype.CreateGauge = function() {
	document.getElementById(this.gaugeID).innerHTML = ""; 
	if(this.GetSize() == 2){
		document.getElementById(this.gaugeID).innerHTML = '<div id="div_' + this.gaugeID + '" style="top: -30px; left: 35px; width: 43px; text-align: center; font-size: 8px; position: relative;" >&nbsp;</div>'; 	
	}
	else{
		document.getElementById(this.gaugeID).innerHTML = '<div id="div_' + this.gaugeID + '" style="top: -48px; left: 68px; width: 53px; text-align: center; font-size: 10px; position: relative;" >&nbsp;</div>'; 
	}
	this.src = window.needles[this.size];
	this.gaugeCanvas = Raphael(this.gaugeID, this.gaugeX, this.gaugeY); 
	this.needle = this.gaugeCanvas.image(this.src, this.posX, this.posY, this.width, this.height);
}

Gauge.prototype.RotateNeedle = function(deg) {
	this.needle.rotate(deg, this.cX, this.cY);
}



/**
 * jQuery Dashboard Gauges v0.1.0
 * http://techoctave.com/c7
 *
 * Copyright 2010, Tian Valdemar Davis
 * Dual licensed under the MIT license.
 * http://en.wikipedia.org/wiki/MIT_license
 *
 * Date: Mon Sep 6 10:00:00 2010 -0500
 */
Speedometer = function (gaugeID) {
	//[State]
	var mph;
		
	//[Initialization]
	this.SetGaugeID(gaugeID);
	
	window.needles = new Array(10);
	
	if($('#' + gaugeID).hasClass('speedometer')){
		this.SetSize(1);
		this.SetGaugeX(185); this.SetGaugeY(185);
		this.SetPosX(80); this.SetPosY(15); this.SetWidth(27); this.SetHeight(109);
		this.LoadCX(0); this.LoadCY(0);
		window.needles[this.GetSize()] = "{!URLFOR($Resource.XactlySMBResources, 'img/layout/express-needle.png')}";
	}
	if($('#' + gaugeID).hasClass('speedometer2')){
		this.SetSize(2);
		this.SetGaugeX(110); this.SetGaugeY(110);
		this.SetPosX(46); this.SetPosY(8); this.SetWidth(18); this.SetHeight(66);
		this.LoadCX(0); this.LoadCY(0);
		window.needles[this.GetSize()] = "{!URLFOR($Resource.XactlySMBResources, 'img/layout/express-needle2.png')}";
	}
	
	this.SetLimit($('#' + gaugeID).attr("rel"));
	if(this.GetLimit() == null || this.GetLimit() == '' || this.GetLimit() == undefined || this.GetLimit() == 'undefined'){
		this.SetLimit(0);
	}
	this.CreateGauge();		
	this.SetMPH(0); //initialize control
}

//Inherit gauge functionality
Speedometer.prototype = new Gauge();

//[Properties]
Speedometer.prototype.SetMPH = function(mph) {
	this.mph = mph;
	
	if( this.mphValidated() ) 
		this.RotateNeedle( this.mph2deg() );
}

Speedometer.prototype.GetMPH = function() {
	return this.mph;
}

//[Methods]
//Speed to degree mappings
Speedometer.prototype.mph2deg = function() {
	return ((this.mph - 50) * 2.62) + (((this.mph - 50) * 1.8999) * 0.022900763);
}

Speedometer.prototype.Accelerate = function() {
	//Setup Timer
	var tm = 30;
	var frc = Number(this.GetLimit()) <= 100 ? Number(this.GetLimit()) / 100 : 1;
	this.SetAjsPer(Number(Number(this.GetLimit()) <= 100 ? 1 : Number(this.GetLimit()) / 100 ));
	this.SetState(0);
	this.SetFcIncrState(frc);
	jQuery(this).everyTime(tm, function(i) {
			this.SetState(this.GetState() + this.GetFcIncrState());
			this.SetMPH((this.GetState()));
			if ((i == 100)) {
			   document.getElementById('div_' + this.GetGaugeID()).innerHTML = Math.round(this.GetLimit()) + ' %';
			}
			else {
			   document.getElementById('div_' + this.GetGaugeID()).innerHTML = Math.round(this.GetMPH() * this.GetAjsPer()) + ' %';
			}
	}, 100);
}

//Validation
Speedometer.prototype.mphValidated = function() {
	return ((this.mph >= 0) && (this.mph <= 100));
}    
    
    </script>
    
    <div style="display:none;">
    <img src="{!URLFOR($Resource.XactlySMBResources, 'img/layout/back_speedometers.png')}" />
    <img src="{!URLFOR($Resource.XactlySMBResources, 'img/layout/express-needle.png')}" />
    <img src="{!URLFOR($Resource.XactlySMBResources, 'img/layout/back_speedometers2.png')}" />
    <img src="{!URLFOR($Resource.XactlySMBResources, 'img/layout/express-needle2.png')}" />
    </div>
    
    <script>
    	
       var gaugeslist = new Array(0);
    	
       jQuery(document).ready(function (){

		setTimeout('runGauges()', 40);
           
       });
       
       function runGauges(){
       	   gaugeslist = new Array(0);
           var i = 0;
           $.each($('.speedometer'), function(){
           		gaugeslist[i] = new Speedometer(this.id);
           		i++;
           });       
           $.each($('.speedometer2'), function(){
           		gaugeslist[i] = new Speedometer(this.id);
           		i++;
           });       
           
           window.gaugesMaxValue = 0;
           
           if(gaugeslist.length > 0){
           	for(i=0;i<gaugeslist.length;i++){
           		if(Number(gaugeslist[i].GetLimit()) > Number(window.gaugesMaxValue)){
           			window.gaugesMaxValue = gaugeslist[i].GetLimit();
           		}
           	}
           }       
           
           if(gaugeslist.length > 0){
           	for(i=0;i<gaugeslist.length;i++){
           		gaugeslist[i].Accelerate();
           	}
           }       
       }
        
    </script>
</apex:component>